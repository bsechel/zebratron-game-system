// Font system with support for ASCII, Hiragana, and Katakana
// Character encoding for ZebratronGameSystem internationalization

#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Language {
    English,
    Japanese,
}

#[derive(Debug, Clone, Copy)]
pub struct Character {
    pub unicode: u32,
    pub glyph_index: usize,
    pub width: u8,
    pub height: u8,
}

// Character sets
pub struct FontSystem {
    pub current_language: Language,
}

impl FontSystem {
    pub fn new() -> Self {
        Self {
            current_language: Language::English,
        }
    }

    pub fn set_language(&mut self, language: Language) {
        self.current_language = language;
    }

    pub fn encode_text(&self, text: &str) -> Vec<Character> {
        text.chars()
            .filter_map(|ch| self.get_character_info(ch))
            .collect()
    }

    pub fn get_character_info(&self, ch: char) -> Option<Character> {
        match ch {
            // ASCII characters (32-126)
            ' '..='~' => {
                let ascii_code = ch as u32;
                Some(Character {
                    unicode: ascii_code,
                    glyph_index: (ascii_code - 32) as usize,
                    width: 8,
                    height: 8,
                })
            },
            // Hiragana characters - manual mapping to HIRAGANA_FONT array indices (professional font)
            'あ' => Some(Character { unicode: 0x3042, glyph_index: 95 + 0, width: 8, height: 8 }),   // あ
            'い' => Some(Character { unicode: 0x3044, glyph_index: 95 + 1, width: 8, height: 8 }),   // い  
            'う' => Some(Character { unicode: 0x3046, glyph_index: 95 + 2, width: 8, height: 8 }),   // う
            'え' => Some(Character { unicode: 0x3048, glyph_index: 95 + 3, width: 8, height: 8 }),   // え
            'お' => Some(Character { unicode: 0x304A, glyph_index: 95 + 4, width: 8, height: 8 }),   // お
            'け' => Some(Character { unicode: 0x3051, glyph_index: 95 + 5, width: 8, height: 8 }),   // け
            'し' => Some(Character { unicode: 0x3057, glyph_index: 95 + 6, width: 8, height: 8 }),   // し
            'じ' => Some(Character { unicode: 0x3058, glyph_index: 95 + 7, width: 8, height: 8 }),   // じ
            'の' => Some(Character { unicode: 0x306E, glyph_index: 95 + 8, width: 8, height: 8 }),   // の
            'び' => Some(Character { unicode: 0x3073, glyph_index: 95 + 9, width: 8, height: 8 }),   // び
            'ぼ' => Some(Character { unicode: 0x307C, glyph_index: 95 + 10, width: 8, height: 8 }),  // ぼ
            'ま' => Some(Character { unicode: 0x307E, glyph_index: 95 + 11, width: 8, height: 8 }),  // ま
            'も' => Some(Character { unicode: 0x3082, glyph_index: 95 + 12, width: 8, height: 8 }),  // も
            'ゅ' => Some(Character { unicode: 0x3085, glyph_index: 95 + 13, width: 8, height: 8 }),  // ゅ
            'ょ' => Some(Character { unicode: 0x3087, glyph_index: 95 + 14, width: 8, height: 8 }),  // ょ
            'ろ' => Some(Character { unicode: 0x308D, glyph_index: 95 + 15, width: 8, height: 8 }),  // ろ
            'を' => Some(Character { unicode: 0x3092, glyph_index: 95 + 16, width: 8, height: 8 }),  // を
            'ん' => Some(Character { unicode: 0x3093, glyph_index: 95 + 17, width: 8, height: 8 }),  // ん
            // Add fallback for full-width exclamation mark
            '！' => Some(Character { unicode: 0xFF01, glyph_index: 33, width: 8, height: 8 }), // Map to exclamation mark
            // Katakana (ア-ン, 30A2-30F3)
            'ア'..='ン' => {
                let katakana_code = ch as u32;
                Some(Character {
                    unicode: katakana_code,
                    glyph_index: 95 + 82 + (katakana_code - 0x30A2) as usize, // After ASCII + Hiragana
                    width: 8,
                    height: 8,
                })
            },
            _ => None,
        }
    }

}

// 8x8 ASCII font (existing font data)
pub const ASCII_FONT: [[u8; 8]; 95] = [
    // Space (32)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // ! (33)
    [0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00],
    // " (34)
    [0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // # (35)
    [0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00],
    // $ (36)
    [0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00],
    // % (37)
    [0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00],
    // & (38)
    [0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00],
    // ' (39)
    [0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00],
    // ( (40)
    [0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00],
    // ) (41)
    [0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00],
    // * (42)
    [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00],
    // + (43)
    [0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00],
    // , (44)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x06, 0x00],
    // - (45)
    [0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00],
    // . (46)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],
    // / (47)
    [0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00],
    // 0 (48)
    [0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00],
    // 1 (49)
    [0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00],
    // 2 (50)
    [0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00],
    // 3 (51)
    [0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00],
    // 4 (52)
    [0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00],
    // 5 (53)
    [0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00],
    // 6 (54)
    [0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00],
    // 7 (55)
    [0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00],
    // 8 (56)
    [0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00],
    // 9 (57)
    [0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00],
    // : (58)
    [0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00],
    // ; (59)
    [0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x06, 0x00],
    // < (60)
    [0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00],
    // = (61)
    [0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00],
    // > (62)
    [0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00],
    // ? (63)
    [0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00],
    // @ (64)
    [0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00],
    // A (65)
    [0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00],
    // B (66)
    [0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00],
    // C (67)
    [0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00],
    // D (68)
    [0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00],
    // E (69)
    [0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00],
    // F (70)
    [0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00],
    // G (71)
    [0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00],
    // H (72)
    [0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00],
    // I (73)
    [0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
    // J (74)
    [0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00],
    // K (75)
    [0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00],
    // L (76)
    [0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00],
    // M (77)
    [0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00],
    // N (78)
    [0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00],
    // O (79)
    [0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00],
    // P (80)
    [0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00],
    // Q (81)
    [0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00],
    // R (82)
    [0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00],
    // S (83)
    [0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00],
    // T (84)
    [0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
    // U (85)
    [0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00],
    // V (86)
    [0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
    // W (87)
    [0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00],
    // X (88)
    [0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00],
    // Y (89)
    [0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00],
    // Z (90)
    [0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00],
    // [ (91)
    [0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00],
    // \ (92)
    [0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00],
    // ] (93)
    [0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00],
    // ^ (94)
    [0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00],
    // _ (95)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
    // ` (96)
    [0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
    // a (97)
    [0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00],
    // b (98)
    [0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00],
    // c (99)
    [0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00],
    // d (100)
    [0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00],
    // e (101)
    [0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00],
    // f (102)
    [0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00],
    // g (103)
    [0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F],
    // h (104)
    [0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00],
    // i (105)
    [0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
    // j (106)
    [0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E],
    // k (107)
    [0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00],
    // l (108)
    [0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
    // m (109)
    [0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00],
    // n (110)
    [0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00],
    // o (111)
    [0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00],
    // p (112)
    [0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F],
    // q (113)
    [0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78],
    // r (114)
    [0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00],
    // s (115)
    [0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00],
    // t (116)
    [0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00],
    // u (117)
    [0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00],
    // v (118)
    [0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
    // w (119)
    [0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00],
    // x (120)
    [0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00],
    // y (121)
    [0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F],
    // z (122)
    [0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00],
    // { (123)
    [0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00],
    // | (124)
    [0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00],
    // } (125)
    [0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00],
    // ~ (126)
    [0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
];

// Professional 8x8 Hiragana glyphs - Based on dhepper/font8x8 (Public Domain)
// Source: https://github.com/dhepper/font8x8 by Daniel Hepper
pub const HIRAGANA_FONT: [[u8; 8]; 93] = [
    // あ (U+3042) - professional hiragana あ
    [0x04, 0x3F, 0x04, 0x3C, 0x56, 0x4D, 0x26, 0x00],
    // い (U+3044) - professional hiragana い
    [0x00, 0x01, 0x11, 0x21, 0x21, 0x25, 0x02, 0x00],
    // う (U+3046) - professional hiragana う  
    [0x00, 0x1C, 0x00, 0x1C, 0x22, 0x20, 0x18, 0x00],
    // え (U+3048) - professional hiragana え
    [0x1C, 0x00, 0x3E, 0x10, 0x38, 0x24, 0x62, 0x00],
    // お (U+304A) - professional hiragana お
    [0x24, 0x4F, 0x04, 0x3C, 0x46, 0x45, 0x22, 0x00],
    // け (U+3051) - professional hiragana け
    [0x00, 0x22, 0x79, 0x21, 0x21, 0x22, 0x10, 0x00],
    // し (U+3057) - professional hiragana し
    [0x00, 0x02, 0x02, 0x02, 0x42, 0x22, 0x1C, 0x00],
    // じ (U+3058) - professional hiragana じ
    [0x20, 0x42, 0x12, 0x22, 0x02, 0x22, 0x1C, 0x00],
    // の (U+306E) - professional hiragana の
    [0x00, 0x00, 0x3C, 0x4A, 0x49, 0x45, 0x22, 0x00],
    // び (U+3073) - professional hiragana び
    [0x20, 0x40, 0x03, 0x32, 0x51, 0x11, 0x0E, 0x00],
    // ぼ (U+307C) - professional hiragana ぼ
    [0x9D, 0x51, 0x1D, 0x11, 0x39, 0x55, 0x09, 0x00],
    // ま (U+307E) - professional hiragana ま
    [0x7E, 0x08, 0x3E, 0x08, 0x1C, 0x2A, 0x04, 0x00],
    // も (U+3082) - professional hiragana も
    [0x02, 0x0F, 0x02, 0x0F, 0x62, 0x42, 0x3C, 0x00],
    // ゅ (U+3085) - professional hiragana ゅ
    [0x00, 0x00, 0x11, 0x3D, 0x53, 0x39, 0x11, 0x00],
    // ょ (U+3087) - professional hiragana ょ
    [0x00, 0x08, 0x38, 0x08, 0x1C, 0x2A, 0x04, 0x00],
    // ろ (U+308D) - professional hiragana ろ
    [0x3F, 0x10, 0x08, 0x3C, 0x42, 0x41, 0x30, 0x00],
    // を (U+3092) - professional hiragana を
    [0x04, 0x0F, 0x04, 0x6E, 0x11, 0x08, 0x70, 0x00],
    // ん (U+3093) - professional hiragana ん
    [0x08, 0x08, 0x04, 0x0C, 0x56, 0x52, 0x21, 0x00],
    // か (ka) - 304B
    [0x08, 0x7C, 0x08, 0x3E, 0x08, 0x08, 0x70, 0x00],
    // が (ga) - 304C
    [0x08, 0x7C, 0x08, 0x3E, 0x08, 0x08, 0x72, 0x05],
    // き (ki) - 304D
    [0x10, 0x10, 0x7C, 0x10, 0x28, 0x44, 0x82, 0x00],
    // ぎ (gi) - 304E
    [0x10, 0x10, 0x7C, 0x10, 0x28, 0x44, 0x84, 0x05],
    // く (ku) - 304F
    [0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00],
    // ぐ (gu) - 3050
    [0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x04, 0x05],
    // け (ke) - 3051
    [0x10, 0x10, 0x7C, 0x10, 0x10, 0x20, 0x40, 0x00],
    // げ (ge) - 3052
    [0x10, 0x10, 0x7C, 0x10, 0x10, 0x20, 0x42, 0x05],
    // こ (ko) - 3053
    [0x00, 0x7E, 0x00, 0x00, 0x00, 0x40, 0x3E, 0x00],
    // ご (go) - 3054
    [0x00, 0x7E, 0x00, 0x00, 0x00, 0x40, 0x3E, 0x05],
    // さ (sa) - 3055
    [0x10, 0x7C, 0x10, 0x10, 0x28, 0x44, 0x82, 0x00],
    // ざ (za) - 3056
    [0x10, 0x7C, 0x10, 0x10, 0x28, 0x44, 0x84, 0x05],
    // し (shi) - 3057
    [0x00, 0x40, 0x40, 0x40, 0x40, 0x20, 0x1C, 0x00],
    // じ (ji) - 3058
    [0x00, 0x40, 0x40, 0x40, 0x40, 0x20, 0x1E, 0x05],
    // す (su) - 3059
    [0x00, 0x7E, 0x00, 0x3C, 0x00, 0x40, 0x3E, 0x00],
    // ず (zu) - 305A
    [0x00, 0x7E, 0x00, 0x3C, 0x00, 0x40, 0x3E, 0x05],
    // せ (se) - 305B
    [0x00, 0x7E, 0x08, 0x3C, 0x08, 0x08, 0x70, 0x00],
    // ぜ (ze) - 305C
    [0x00, 0x7E, 0x08, 0x3C, 0x08, 0x08, 0x72, 0x05],
    // そ (so) - 305D
    [0x00, 0x1E, 0x20, 0x40, 0x40, 0x20, 0x1E, 0x00],
    // ぞ (zo) - 305E
    [0x00, 0x1E, 0x20, 0x40, 0x40, 0x20, 0x1E, 0x05],
    // た (ta) - 305F
    [0x00, 0x7E, 0x08, 0x08, 0x08, 0x08, 0x70, 0x00],
    // だ (da) - 3060
    [0x00, 0x7E, 0x08, 0x08, 0x08, 0x08, 0x72, 0x05],
    // ち (chi) - 3061
    [0x10, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x0E, 0x00],
    // ぢ (di) - 3062
    [0x10, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x0E, 0x05],
    // つ (tsu) - 3064
    [0x00, 0x18, 0x24, 0x42, 0x24, 0x18, 0x00, 0x00],
    // づ (du) - 3065
    [0x00, 0x18, 0x24, 0x42, 0x24, 0x18, 0x00, 0x05],
    // て (te) - 3066
    [0x00, 0x7E, 0x00, 0x00, 0x40, 0x40, 0x3E, 0x00],
    // で (de) - 3067
    [0x00, 0x7E, 0x00, 0x00, 0x40, 0x40, 0x3E, 0x05],
    // と (to) - 3068
    [0x10, 0x10, 0x7C, 0x10, 0x20, 0x40, 0x80, 0x00],
    // ど (do) - 3069
    [0x10, 0x10, 0x7C, 0x10, 0x20, 0x40, 0x82, 0x05],
    // な (na) - 306A
    [0x00, 0x3C, 0x00, 0x1E, 0x20, 0x20, 0x1E, 0x00],
    // に (ni) - 306B
    [0x20, 0x20, 0x20, 0x3E, 0x20, 0x20, 0x20, 0x00],
    // ぬ (nu) - 306C
    [0x00, 0x1C, 0x22, 0x20, 0x20, 0x10, 0x0E, 0x00],
    // ね (ne) - 306D
    [0x00, 0x3C, 0x42, 0x3C, 0x20, 0x10, 0x0E, 0x00],
    // の (no) - 306E
    [0x00, 0x1C, 0x22, 0x20, 0x22, 0x22, 0x1C, 0x00],
    // は (ha) - 306F
    [0x24, 0x24, 0x3C, 0x00, 0x42, 0x42, 0x3C, 0x00],
    // ば (ba) - 3070
    [0x24, 0x24, 0x3C, 0x00, 0x42, 0x42, 0x3E, 0x05],
    // ぱ (pa) - 3071
    [0x24, 0x24, 0x3C, 0x00, 0x42, 0x42, 0x3C, 0x18],
    // ひ (hi) - 3072
    [0x08, 0x08, 0x08, 0x00, 0x10, 0x10, 0x0E, 0x00],
    // び (bi) - 3073
    [0x08, 0x08, 0x08, 0x00, 0x10, 0x10, 0x0E, 0x05],
    // ぴ (pi) - 3074
    [0x08, 0x08, 0x08, 0x00, 0x10, 0x10, 0x0E, 0x18],
    // ふ (fu) - 3075
    [0x00, 0x18, 0x24, 0x42, 0x42, 0x24, 0x18, 0x00],
    // ぶ (bu) - 3076
    [0x00, 0x18, 0x24, 0x42, 0x42, 0x24, 0x1A, 0x05],
    // ぷ (pu) - 3077
    [0x00, 0x18, 0x24, 0x42, 0x42, 0x24, 0x18, 0x18],
    // へ (he) - 3078
    [0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00],
    // べ (be) - 3079
    [0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x06, 0x05],
    // ぺ (pe) - 307A
    [0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x18],
    // ほ (ho) - 307B
    [0x10, 0x7C, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00],
    // ぼ (bo) - 307C
    [0x10, 0x7C, 0x10, 0x28, 0x44, 0x82, 0x02, 0x05],
    // ぽ (po) - 307D
    [0x10, 0x7C, 0x10, 0x28, 0x44, 0x82, 0x00, 0x18],
    // ま (ma) - 307E
    [0x00, 0x7E, 0x08, 0x1C, 0x22, 0x42, 0x3C, 0x00],
    // み (mi) - 307F
    [0x00, 0x1C, 0x22, 0x20, 0x22, 0x14, 0x08, 0x00],
    // む (mu) - 3080
    [0x00, 0x3C, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00],
    // め (me) - 3081
    [0x00, 0x3C, 0x42, 0x3C, 0x42, 0x42, 0x3C, 0x00],
    // も (mo) - 3082
    [0x00, 0x7E, 0x08, 0x1C, 0x20, 0x40, 0x3E, 0x00],
    // や (ya) - 3084
    [0x00, 0x42, 0x42, 0x3C, 0x08, 0x08, 0x70, 0x00],
    // ゆ (yu) - 3086
    [0x00, 0x1C, 0x22, 0x20, 0x22, 0x22, 0x1C, 0x00],
    // よ (yo) - 3088
    [0x10, 0x7C, 0x10, 0x00, 0x40, 0x40, 0x3E, 0x00],
    // ら (ra) - 3089
    [0x00, 0x1E, 0x20, 0x3C, 0x42, 0x42, 0x3C, 0x00],
    // り (ri) - 308A
    [0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x0E, 0x00],
    // る (ru) - 308B
    [0x00, 0x1E, 0x20, 0x1C, 0x20, 0x20, 0x1E, 0x00],
    // れ (re) - 308C
    [0x00, 0x1E, 0x20, 0x1C, 0x22, 0x22, 0x1C, 0x00],
    // ろ (ro) - 308D
    [0x00, 0x1C, 0x22, 0x20, 0x20, 0x22, 0x1C, 0x00],
    // わ (wa) - 308F
    [0x00, 0x42, 0x42, 0x3C, 0x42, 0x42, 0x3C, 0x00],
    // ゐ (wi) - 3090 (archaic)
    [0x18, 0x18, 0x18, 0x3C, 0x18, 0x18, 0x18, 0x00],
    // ゑ (we) - 3091 (archaic)
    [0x00, 0x7E, 0x00, 0x3C, 0x42, 0x42, 0x3C, 0x00],
    // を (wo) - 3092
    [0x00, 0x3C, 0x42, 0x40, 0x3C, 0x04, 0x78, 0x00],
    // ん (n) - 3093
    [0x00, 0x42, 0x42, 0x42, 0x42, 0x26, 0x1A, 0x02],
    // っ (small tsu) - 3063
    [0x00, 0x0C, 0x12, 0x21, 0x12, 0x0C, 0x00, 0x00],
    // ゃ (small ya) - 3083
    [0x00, 0x21, 0x21, 0x1E, 0x04, 0x04, 0x38, 0x00],
    // ゅ (small yu) - 3085
    [0x00, 0x0E, 0x11, 0x10, 0x11, 0x11, 0x0E, 0x00],
    // ょ (small yo) - 3087
    [0x08, 0x3E, 0x08, 0x00, 0x20, 0x20, 0x1F, 0x00],
    // ー (long vowel mark) - 30FC
    [0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00],
    // 。 (period) - 3002
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00],
    // 、 (comma) - 3001
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0x00],
];

// Basic Katakana glyphs (ア-ン) - 8x8 simplified versions  
pub const KATAKANA_FONT: [[u8; 8]; 80] = [
    // ア (a) - 30A2
    [0x08, 0x1C, 0x36, 0x63, 0x7F, 0x63, 0x63, 0x00],
    // イ (i) - 30A4
    [0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x60, 0x00],
    // ウ (u) - 30A6
    [0x10, 0x10, 0x10, 0x10, 0x28, 0x44, 0x82, 0x00],
    // エ (e) - 30A8
    [0x7F, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x7F, 0x00],
    // オ (o) - 30AA
    [0x08, 0x7F, 0x08, 0x08, 0x14, 0x22, 0x41, 0x00],
    // カ (ka) - 30AB
    [0x08, 0x7F, 0x08, 0x1C, 0x08, 0x08, 0x70, 0x00],
    // ガ (ga) - 30AC
    [0x08, 0x7F, 0x08, 0x1C, 0x08, 0x08, 0x72, 0x05],
    // キ (ki) - 30AD
    [0x10, 0x10, 0x7F, 0x10, 0x28, 0x44, 0x82, 0x00],
    // ギ (gi) - 30AE
    [0x10, 0x10, 0x7F, 0x10, 0x28, 0x44, 0x84, 0x05],
    // ク (ku) - 30AF
    [0x40, 0x40, 0x40, 0x7F, 0x00, 0x00, 0x00, 0x00],
    // グ (gu) - 30B0
    [0x40, 0x40, 0x40, 0x7F, 0x00, 0x00, 0x02, 0x05],
    // ケ (ke) - 30B1
    [0x7F, 0x08, 0x08, 0x08, 0x08, 0x10, 0x60, 0x00],
    // ゲ (ge) - 30B2
    [0x7F, 0x08, 0x08, 0x08, 0x08, 0x10, 0x62, 0x05],
    // コ (ko) - 30B3
    [0x7F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x00],
    // ゴ (go) - 30B4
    [0x7F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x43, 0x05],
    // サ (sa) - 30B5
    [0x08, 0x7F, 0x08, 0x08, 0x14, 0x22, 0x41, 0x00],
    // ザ (za) - 30B6
    [0x08, 0x7F, 0x08, 0x08, 0x14, 0x22, 0x43, 0x05],
    // シ (shi) - 30B7
    [0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x00],
    // ジ (ji) - 30B8
    [0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x05],
    // ス (su) - 30B9
    [0x04, 0x04, 0x04, 0x7F, 0x04, 0x04, 0x04, 0x00],
    // ズ (zu) - 30BA
    [0x04, 0x04, 0x04, 0x7F, 0x04, 0x04, 0x06, 0x05],
    // セ (se) - 30BB
    [0x7F, 0x00, 0x00, 0x1C, 0x04, 0x04, 0x78, 0x00],
    // ゼ (ze) - 30BC
    [0x7F, 0x00, 0x00, 0x1C, 0x04, 0x04, 0x7A, 0x05],
    // ソ (so) - 30BD
    [0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x60, 0x00],
    // ゾ (zo) - 30BE
    [0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x62, 0x05],
    // タ (ta) - 30BF
    [0x7F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x70, 0x00],
    // ダ (da) - 30C0
    [0x7F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x72, 0x05],
    // チ (chi) - 30C1
    [0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x70, 0x00],
    // ヂ (di) - 30C2
    [0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x72, 0x05],
    // ツ (tsu) - 30C4
    [0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x70, 0x00],
    // ヅ (du) - 30C5
    [0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x72, 0x05],
    // テ (te) - 30C6
    [0x7F, 0x08, 0x08, 0x08, 0x10, 0x20, 0x40, 0x00],
    // デ (de) - 30C7
    [0x7F, 0x08, 0x08, 0x08, 0x10, 0x20, 0x42, 0x05],
    // ト (to) - 30C8
    [0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x08, 0x00],
    // ド (do) - 30C9
    [0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x0A, 0x05],
    // ナ (na) - 30CA
    [0x08, 0x7F, 0x08, 0x00, 0x80, 0x40, 0x3F, 0x00],
    // ニ (ni) - 30CB
    [0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00],
    // ヌ (nu) - 30CC
    [0x04, 0x04, 0x04, 0x7F, 0x20, 0x10, 0x0F, 0x00],
    // ネ (ne) - 30CD
    [0x08, 0x7F, 0x08, 0x1C, 0x20, 0x40, 0x3F, 0x00],
    // ノ (no) - 30CE
    [0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00],
    // ハ (ha) - 30CF
    [0x08, 0x08, 0x08, 0x00, 0x41, 0x22, 0x1C, 0x00],
    // バ (ba) - 30D0
    [0x08, 0x08, 0x08, 0x00, 0x41, 0x22, 0x1E, 0x05],
    // パ (pa) - 30D1
    [0x08, 0x08, 0x08, 0x00, 0x41, 0x22, 0x1C, 0x18],
    // ヒ (hi) - 30D2
    [0x08, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x00],
    // ビ (bi) - 30D3
    [0x08, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x0A, 0x05],
    // ピ (pi) - 30D4
    [0x08, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x18],
    // フ (fu) - 30D5
    [0x01, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x01, 0x00],
    // ブ (bu) - 30D6
    [0x01, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x03, 0x05],
    // プ (pu) - 30D7
    [0x01, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x01, 0x18],
    // ヘ (he) - 30D8
    [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00],
    // ベ (be) - 30D9
    [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x42, 0x05],
    // ペ (pe) - 30DA
    [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x18],
    // ホ (ho) - 30DB
    [0x08, 0x7F, 0x08, 0x1C, 0x22, 0x41, 0x00, 0x00],
    // ボ (bo) - 30DC
    [0x08, 0x7F, 0x08, 0x1C, 0x22, 0x41, 0x02, 0x05],
    // ポ (po) - 30DD
    [0x08, 0x7F, 0x08, 0x1C, 0x22, 0x41, 0x00, 0x18],
    // マ (ma) - 30DE
    [0x7F, 0x04, 0x08, 0x08, 0x08, 0x10, 0x60, 0x00],
    // ミ (mi) - 30DF
    [0x40, 0x40, 0x7F, 0x40, 0x40, 0x7F, 0x40, 0x00],
    // ム (mu) - 30E0
    [0x08, 0x08, 0x08, 0x08, 0x14, 0x22, 0x41, 0x00],
    // メ (me) - 30E1
    [0x01, 0x02, 0x04, 0x7F, 0x10, 0x08, 0x04, 0x00],
    // モ (mo) - 30E2
    [0x7F, 0x08, 0x1C, 0x00, 0x80, 0x40, 0x3F, 0x00],
    // ヤ (ya) - 30E4
    [0x08, 0x7F, 0x08, 0x00, 0x41, 0x22, 0x1C, 0x00],
    // ユ (yu) - 30E6
    [0x08, 0x08, 0x7F, 0x08, 0x08, 0x10, 0x60, 0x00],
    // ヨ (yo) - 30E8
    [0x7F, 0x00, 0x1C, 0x00, 0x80, 0x40, 0x3F, 0x00],
    // ラ (ra) - 30E9
    [0x08, 0x7F, 0x08, 0x1C, 0x04, 0x04, 0x78, 0x00],
    // リ (ri) - 30EA
    [0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00],
    // ル (ru) - 30EB
    [0x02, 0x02, 0x02, 0x3E, 0x20, 0x20, 0x1F, 0x00],
    // レ (re) - 30EC
    [0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x78, 0x00],
    // ロ (ro) - 30ED
    [0x7F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x7F, 0x00],
    // ワ (wa) - 30EF
    [0x08, 0x08, 0x7F, 0x08, 0x41, 0x22, 0x1C, 0x00],
    // ヰ (wi) - 30F0 (archaic)
    [0x08, 0x7F, 0x08, 0x3E, 0x08, 0x08, 0x08, 0x00],
    // ヱ (we) - 30F1 (archaic) 
    [0x7F, 0x00, 0x1C, 0x00, 0x41, 0x22, 0x1C, 0x00],
    // ヲ (wo) - 30F2
    [0x08, 0x7F, 0x08, 0x14, 0x20, 0x40, 0x3F, 0x00],
    // ン (n) - 30F3
    [0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x60, 0x00],
    // ッ (small tsu) - 30C3
    [0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x38, 0x00],
    // ャ (small ya) - 30E3
    [0x04, 0x3F, 0x04, 0x00, 0x20, 0x11, 0x0E, 0x00],
    // ュ (small yu) - 30E5
    [0x04, 0x04, 0x3F, 0x04, 0x04, 0x08, 0x30, 0x00],
    // ョ (small yo) - 30E7
    [0x3F, 0x00, 0x0E, 0x00, 0x40, 0x20, 0x1F, 0x00],
    // ー (long vowel mark) - 30FC
    [0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00],
    // 。 (period) - 3002  
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00],
    // 、 (comma) - 3001
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0x00],
];

// Combined font data - returns the appropriate font array and offset
pub fn get_font_data(glyph_index: usize) -> Option<&'static [u8; 8]> {
    if glyph_index < ASCII_FONT.len() {
        Some(&ASCII_FONT[glyph_index])
    } else if glyph_index < ASCII_FONT.len() + HIRAGANA_FONT.len() {
        Some(&HIRAGANA_FONT[glyph_index - ASCII_FONT.len()])
    } else if glyph_index < ASCII_FONT.len() + HIRAGANA_FONT.len() + KATAKANA_FONT.len() {
        Some(&KATAKANA_FONT[glyph_index - ASCII_FONT.len() - HIRAGANA_FONT.len()])
    } else {
        None
    }
}